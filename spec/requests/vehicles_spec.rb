 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/vehicles", type: :request do
  # Vehicle. As you add validations to Vehicle, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:vehicle)
  }

  let(:invalid_attributes) {
    attributes_for(:vehicle, model: nil)
  }

  before(:each) do
    user = create(:user)
    sign_in user
  end

  describe "GET /index" do
    it "renders a successful response" do
      create(:vehicle, valid_attributes)
      get vehicles_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      vehicle = create(:vehicle, valid_attributes)
      get vehicle_url(vehicle)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Vehicle" do
        expect {
          post vehicles_url, params: { vehicle: valid_attributes }
        }.to change(Vehicle, :count).by(1)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Vehicle" do
        expect {
          post vehicles_url, params: { vehicle: invalid_attributes }
        }.to change(Vehicle, :count).by(0)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { model: FFaker::Vehicle.model }
      }

      it "updates the requested vehicle" do
        vehicle = create(:vehicle, valid_attributes)
        patch vehicle_url(vehicle), params: { vehicle: new_attributes }
        vehicle.reload
        expect(vehicle.model).to eq(new_attributes[:model])
      end
    end

    context "with invalid parameters" do
      it "renders a successful response" do
        vehicle = create(:vehicle, valid_attributes)
        patch vehicle_url(vehicle), params: { vehicle: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested vehicle" do
      vehicle = create(:vehicle, valid_attributes)
      expect {
        delete vehicle_url(vehicle)
      }.to change(Vehicle, :count).by(-1)
    end
  end
end
