 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/rents", type: :request do
  # Rent. As you add validations to Rent, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:rent, vehicle_id: create(:vehicle).id)
  }

  let(:invalid_attributes) {
    attributes_for(:rent, cpf: nil)
  }

  before(:each) do
    user = create(:user)
    sign_in user
  end

  describe "GET /index" do
    it "renders a successful response" do
      create(:rent, valid_attributes)
      get rents_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      rent = create(:rent, valid_attributes)
      get rent_url(rent)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Rent" do
        expect {
          post rents_url, params: { rent: valid_attributes }
        }.to change(Rent, :count).by(1)
      end
      it "returns created status" do
        post rents_url, params: { rent: valid_attributes }

        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Rent" do
        expect {
          post rents_url, params: { rent: invalid_attributes }
        }.to change(Rent, :count).by(0)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { cpf: FFaker::IdentificationBR.cpf }
      }

      it "updates the requested rent" do
        rent = create(:rent, valid_attributes)

        patch rent_url(rent), params: { rent: new_attributes }
        rent.reload

        expect(rent.cpf).to eq(new_attributes[:cpf])
      end

      it "returns success response" do
        rent = create(:rent, valid_attributes)

        patch rent_url(rent), params: { rent: new_attributes }
        rent.reload

        expect(response).to be_successful
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        rent = create(:rent, valid_attributes)
        patch rent_url(rent), params: { rent: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested rent" do
      rent = create(:rent, valid_attributes)
      expect {
        delete rent_url(rent)
      }.to change(Rent, :count).by(-1)
    end
  end
end
